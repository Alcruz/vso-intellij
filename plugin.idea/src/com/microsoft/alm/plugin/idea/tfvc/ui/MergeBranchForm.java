// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

package com.microsoft.alm.plugin.idea.tfvc.ui;

import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.EventDispatcher;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.CardLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.EventListener;

public class MergeBranchForm {

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myContentPanel = new JPanel();
        myContentPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mySourceBranchLabel = new JLabel();
        mySourceBranchLabel.setText("Source:");
        mySourceBranchLabel.setDisplayedMnemonic('S');
        mySourceBranchLabel.setDisplayedMnemonicIndex(0);
        myContentPanel.add(mySourceBranchLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mySourceField = new TextFieldWithBrowseButton.NoPathCompletion();
        myContentPanel.add(mySourceField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Target:");
        label1.setDisplayedMnemonic('T');
        label1.setDisplayedMnemonicIndex(0);
        myContentPanel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myTargetCombo = new JComboBox();
        myContentPanel.add(myTargetCombo, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.putClientProperty("BorderFactoryClass", "com.intellij.ui.IdeBorderFactory$PlainSmallWithIndent");
        myContentPanel.add(panel1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder("Changes to merge:"));
        myChangesTypeCombo = new JComboBox();
        panel1.add(myChangesTypeCombo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myChangesetsPanel = new JPanel();
        myChangesetsPanel.setLayout(new CardLayout(0, 0));
        panel1.add(myChangesetsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        label1.setLabelFor(myTargetCombo);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myContentPanel;
    }

    public interface Listener extends EventListener {
        void stateChanged(boolean canFinish);
    }

    private enum ChangesType {
        ALL {
            public String toString() {
                return "All changes up to a specific version";
            }
        },

        SELECTED {
            public String toString() {
                return "Selected changesets";
            }
        }
    }

    private TextFieldWithBrowseButton.NoPathCompletion mySourceField;
    private JComboBox myTargetCombo;
    private JComboBox myChangesTypeCombo;
    //private final SelectRevisionForm mySelectRevisionForm;
    private JPanel myContentPanel;
    private JPanel myChangesetsPanel;
    private JLabel mySourceBranchLabel;
    private final Project myProject;
    //private final WorkspaceInfo myWorkspace;
    //private final JTable myChangesetsTable;
    //private final ChangesetsTableModel myChangesetsTableModel;
    private final String myDialogTitle;
    private final EventDispatcher<Listener> myEventDispatcher = EventDispatcher.create(Listener.class);
    private boolean mySourceIsDirectory;
    private final FocusListener mySourceFieldFocusListener;

    public MergeBranchForm(final Project project,
                           //final WorkspaceInfo workspace,
                           String initialSourcePath,
                           boolean initialSourcePathIsDirectory,
                           final String dialogTitle) {
        myProject = project;
        //myWorkspace = workspace;
        myDialogTitle = dialogTitle;

        mySourceBranchLabel.setLabelFor(mySourceField.getChildComponent());

        //myChangesetsTableModel = new ChangesetsTableModel();
        //myChangesetsTable = new JBTable(myChangesetsTableModel);
        //myChangesetsTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        //for (int i = 0; i < ChangesetsTableModel.Column.values().length; i++) {
        //  myChangesetsTable.getColumnModel().getColumn(i).setPreferredWidth(ChangesetsTableModel.Column.values()[i].getWidth());
        //}

        //mySelectRevisionForm = new SelectRevisionForm();

        //myChangesetsPanel.add(mySelectRevisionForm.getPanel(), ChangesType.ALL.toString());
        //myChangesetsPanel.add(ScrollPaneFactory.createScrollPane(myChangesetsTable), ChangesType.SELECTED.toString());

        mySourceField.setText(initialSourcePath);
        mySourceIsDirectory = initialSourcePathIsDirectory;

        mySourceField.getButton().addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                //ServerBrowserDialog d =
                //  new ServerBrowserDialog(TFSBundle.message("choose.source.item.dialog.title"), project, workspace.getServer(),
                //                          mySourceField.getText(), false, false);
                //if (d.showAndGet()) {
                //  final TfsTreeForm.SelectedItem selectedItem = d.getSelectedItem();
                //  mySourceField.setText(selectedItem != null ? selectedItem.path : null);
                //  mySourceIsDirectory = selectedItem == null || selectedItem.isDirectory;
                //}
                //updateOnSourceChange();
            }
        });

        mySourceFieldFocusListener = new FocusAdapter() {
            public void focusLost(final FocusEvent e) {
                mySourceIsDirectory = true;

                // TODO don't do it on focus out, rather provide a 'Refresh' button
                ApplicationManager.getApplication().invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        //updateOnSourceChange();
                    }
                }, ModalityState.current());
            }
        };
        mySourceField.getTextField().addFocusListener(mySourceFieldFocusListener);

//    myTargetCombo.setModel(new DefaultComboBoxModel());
//    myTargetCombo.setRenderer(new DefaultListCellRenderer() {
//      public Component getListCellRendererComponent(final JList list,
//                                                    final Object value,
//                                                    final int index,
//                                                    final boolean isSelected,
//                                                    final boolean cellHasFocus) {
//        final Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
//        if (value != null) {
//          Item item = (Item)value;
//          setText(item.getItem());
//        }
//        return c;
//      }
//    });

        myTargetCombo.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                if (myChangesTypeCombo.getSelectedItem() == ChangesType.SELECTED) {
                    //updateChangesetsTable();
                }
            }
        });

        myChangesTypeCombo.setModel(new DefaultComboBoxModel(ChangesType.values()));

        myChangesTypeCombo.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                if (myChangesTypeCombo.getSelectedItem() == ChangesType.SELECTED) {
                    //updateChangesetsTable();
                }
                ((CardLayout) myChangesetsPanel.getLayout()).show(myChangesetsPanel, myChangesTypeCombo.getSelectedItem().toString());
                fireStateChanged();
            }
        });

        //myChangesetsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        //  public void valueChanged(final ListSelectionEvent e) {
        //    fireStateChanged();
        //  }
        //});

        myChangesTypeCombo.setSelectedIndex(0);
        //mySelectRevisionForm.init(project, workspace, initialSourcePath, initialSourcePathIsDirectory);
    }

    public JComponent getContentPanel() {
        return myContentPanel;
    }

//  private void updateChangesetsTable() {
//    List<Changeset> changesets = new ArrayList<Changeset>();
//    if (myTargetCombo.getSelectedIndex() != -1) {
//      try {
//        final Collection<MergeCandidate> mergeCandidates = myWorkspace.getServer().getVCS()
//          .queryMergeCandidates(myWorkspace.getName(), myWorkspace.getOwnerName(), mySourceField.getText(), getTargetPath(), myProject,
//                                TFSBundle.message("loading.branches"));
//        for (MergeCandidate candidate : mergeCandidates) {
//          changesets.add(candidate.getChangeset());
//        }
//      }
//      catch (TfsException e) {
//        Messages.showErrorDialog(myProject, e.getMessage(), myDialogTitle);
//      }
//    }
//    myChangesetsTableModel.setChangesets(changesets);
//  }

    public String getSourcePath() {
        return mySourceField.getText();
    }
//
//  public String getTargetPath() {
//    Item targetBranch = (Item)myTargetCombo.getSelectedItem();
//    return targetBranch.getItem();
//  }

//  @Nullable
//  public VersionSpecBase getFromVersion() {
//    ChangesType changesType = (ChangesType)myChangesTypeCombo.getSelectedItem();
//    if (changesType == ChangesType.SELECTED) {
//      final Changeset fromChangeset =
//        myChangesetsTableModel.getChangesets().get(myChangesetsTable.getSelectionModel().getMinSelectionIndex());
//      return new ChangesetVersionSpec(fromChangeset.getCset());
//    }
//    else {
//      return null;
//    }
//  }

//  @Nullable
//  public VersionSpecBase getToVersion() {
//    ChangesType changesType = (ChangesType)myChangesTypeCombo.getSelectedItem();
//    if (changesType == ChangesType.SELECTED) {
//      final Changeset toChangeset =
//        myChangesetsTableModel.getChangesets().get(myChangesetsTable.getSelectionModel().getMaxSelectionIndex());
//      return new ChangesetVersionSpec(toChangeset.getCset());
//    }
//    else {
//      return mySelectRevisionForm.getVersionSpec();
//    }
//  }

    public void addListener(Listener listener) {
        myEventDispatcher.addListener(listener);
    }

    public void removeListener(Listener listener) {
        myEventDispatcher.removeListener(listener);
    }

    private void fireStateChanged() {
        myEventDispatcher.getMulticaster().stateChanged(canFinish());
    }

    private boolean canFinish() {
//        ChangesType changesType = (ChangesType) myChangesTypeCombo.getSelectedItem();
//        if (changesType == ChangesType.SELECTED) {
//            if (myChangesetsTable.getSelectedRowCount() == 0) {
//                return false;
//            }
//        }
//
//        if (myTargetCombo.getSelectedIndex() == -1) {
//            return false;
//        }

        return true;
    }

//  private void updateOnSourceChange() {
//    final Collection<Item> targetBranches = new ArrayList<Item>();
//    try {
//      final Collection<BranchRelative> allBranches =
//        myWorkspace.getServer().getVCS()
//          .queryBranches(mySourceField.getText(), LatestVersionSpec.INSTANCE, myProject, TFSBundle.message("loading.branches"));
//
//      BranchRelative subject = null;
//      for (BranchRelative branch : allBranches) {
//        if (branch.getReqstd()) {
//          subject = branch;
//          break;
//        }
//      }
//
//      for (BranchRelative branch : allBranches) {
//        if ((branch.getRelfromid() == subject.getReltoid() || branch.getReltoid() == subject.getRelfromid()) &&
//            branch.getBranchToItem().getDid() == Integer.MIN_VALUE) {
//          targetBranches.add(branch.getBranchToItem());
//        }
//      }
//    }
//    catch (UserCancelledException e) {
//      return;
//    }
//    catch (TfsException e) {
//      Messages.showErrorDialog(myProject, e.getMessage(), myDialogTitle);
//    }
//
//    ((DefaultComboBoxModel)myTargetCombo.getModel()).removeAllElements();
//    for (Item targetBranch : targetBranches) {
//      ((DefaultComboBoxModel)myTargetCombo.getModel()).addElement(targetBranch);
//    }
//    mySelectRevisionForm.init(myProject, myWorkspace, mySourceField.getText(), mySourceIsDirectory);
//    fireStateChanged();
//  }

    public void close() {
        mySourceField.getTextField().removeFocusListener(mySourceFieldFocusListener);
    }

    public JComponent getPreferredFocusedComponent() {
        return mySourceField.getChildComponent();
    }

}
